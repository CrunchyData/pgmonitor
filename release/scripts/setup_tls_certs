#!/bin/bash

CFVER=${CFVER:-1.6.1}
BINDIR=${BINDIR:-~/bin}
CFSSL=cfssl_${CFVER}_linux_amd64
CFJSON=cfssljson_${CFVER}_linux_amd64

if [ ! -f ${BINDIR}/${CFSSL} ]; then
  curl -s -L -o ${BINDIR}/${CFSSL} https://github.com/cloudflare/cfssl/releases/download/v${CFVER}/${CFSSL}
  chmod 755 ${BINDIR}/${CFSSL}
fi

if [ ! -f ${BINDIR}/${CFJSON} ]; then
  curl -s -L -o ${BINDIR}/${CFJSON} https://github.com/cloudflare/cfssl/releases/download/v${CFVER}/${CFJSON}
  chmod 755 ${BINDIR}/${CFJSON}
fi

WORKING_DIR=${WORKING_DIR:-~/myplaybooks/files/tls}
ALGORITHM=${ALGORITHM:-ecdsa}
KEY_SIZE=${KEY_SIZE:-256}
EXPIRY=${EXPIRE:-8760h}
VM_SUBNET=${VM_SUBNET:-192.168.122}
SERVICES=${SERVICES:-etcd patroni postgres pgbouncer pgmonitor grafana}
CA_SUBJECT=${CA_SUBJECT:-CrunchyData}
CA_ORG=${CA_ORG:-CrunchyData}
CA_ORG_UNIT=${CA_ORG_UNIT:-CrunchyData}
DBUSERS=${DBUSERS:-testuser pgbouncer ccp_monitoring}
CERT_SUBJECT=${CERT_SUBJECT:-CrunchyData}
CERT_DOMAIN=${CERT_DOMAIN:-crunchydata.labs}

mkdir -p ${WORKING_DIR}
cd ${WORKING_DIR}

cat >ca-config.json  <<CA_CONFIG
{
  "signing": {
    "default": {
      "expiry": "${EXPIRY}"
    },
    "profiles": {
      "allinone": {
        "usages": [
          "signing",
          "digital signature",
          "cert sign",
          "crl sign",
          "key encipherment",
          "server auth",
          "client auth"
        ],
        "expiry": "${EXPIRY}"
      }
    }
  }
}
CA_CONFIG

cat >ca-csr.json <<CA_CSR
{
  "CN": "${CA_SUBJECT}",
  "key": {
    "algo": "${ALGORITHM}",
    "size": ${KEY_SIZE}
  },
  "names": [
    {
      "O": "${CA_ORG}",
      "OU": "${CA_ORG_UNIT}"
    }
  ]
}
CA_CSR

cat >wildcard-csr.json <<WILDCARD_CSR
{
  "CN": "${CERT_SUBJECT}",
  "hosts": [
    "${CERT_DOMAIN}",
    "*.${CERT_DOMAIN}",
    "$(echo ${VM_SUBNET}.{1..255} | sed 's/\ /","/g')",
    "localhost",
    "127.0.0.1"
  ],
  "key": {
    "algo": "${ALGORITHM}",
    "size": ${KEY_SIZE}
  }
}
WILDCARD_CSR

# Generate CA Cert
echo "Generating CA"
${BINDIR}/${CFSSL} gencert \
  -loglevel 2 \
  -initca ca-csr.json | ${BINDIR}/${CFJSON} -bare CA.${CERT_DOMAIN}

# Generate Wildcard Cert
echo "Generating Wildcard certificate"
${BINDIR}/${CFSSL} gencert  \
  -loglevel 2 \
  -ca=CA.${CERT_DOMAIN}.pem -ca-key=CA.${CERT_DOMAIN}-key.pem \
  -config=ca-config.json -loglevel 2 \
  -profile=allinone \
  wildcard-csr.json | ${BINDIR}/${CFJSON} -bare ${CERT_DOMAIN}


for u in ${DBUSERS}
do

cat >${u}-csr.json <<DBUSERS_CSR
{
  "CN": "${u}",
  "hosts": [
    "${CERT_DOMAIN}",
    "*.${CERT_DOMAIN}",
    "$(echo ${VM_SUBNET}.{1..255} | sed 's/\ /","/g')",
    "localhost",
    "127.0.0.1"
  ],
  "key": {
    "algo": "${ALGORITHM}",
    "size": ${KEY_SIZE}
  }
}
DBUSERS_CSR

echo "Generating ${u} certificate"
${BINDIR}/${CFSSL} gencert \
  -loglevel 2 \
  -ca=CA.${CERT_DOMAIN}.pem -ca-key=CA.${CERT_DOMAIN}-key.pem \
  -config=ca-config.json -loglevel 2 \
  -profile=allinone \
  ${u}-csr.json | ${BINDIR}/${CFJSON} -bare u-${u}.${CERT_DOMAIN}
done

for s in ${SERVICES}
do
  cp ${CERT_DOMAIN}.pem ${s}.${CERT_DOMAIN}.pem
  cp ${CERT_DOMAIN}-key.pem ${s}.${CERT_DOMAIN}-key.pem
done
