[
{
	"uri": "/exporter/",
	"title": "Setting up Exporters",
	"tags": [],
	"description": "",
	"content": " The exporters below can be set up on any Linux-based system, but the instructions below use RHEL/CentOS 7.\n Installation Setup  RHEL / CentOS 7 RHEL / CentOS 6   Installation Upgrading 1.x -\u0026gt; 2.x  See CHANGLOG.md file for full details on what has changed in this major version upgrade. Many of the metric names in node_exporter v0.16.0 have had their names changed. All of the ones that pgmonitor uses in alerting and grafana related to CPU, Memory and Disk have been renamed. All files provided by pgmonitor 2.x have been updated to account for these changes so please either use these new files or see what has changed an incorporate them into your environment. The symlink for the postgres_exporter sysconfig file is no longer being used. The symlink is removed as part of the upgrade, so the default postgres_exporter service that previously used this may have to be updated. See the Enable Services section below for the correct systemctl command to create the new service name. The old service can then be disabled/removed. The ccp_is_ready check has been removed and pgmonitor now uses the pg_up check built into postgres_exporter. Prometheus alerting and grafana dashboards have been updated to account for this. A new metric ccp_is_in_recovery is used to help determine the primary/replica state of a given database in the grafana dashboards. The query for this can be found in queries_common.sql  Installation on RHEL/CentOS 7 With RPM Packages There are RPM packages available to Crunchy Data customers through the Crunchy Customer Portal.\nIf you install the below available packages with RPM, you can continue reading at the Setup section.\nAvailable Packages    Package Name Description     node_exporter Base package for node_exporter   postgres_exporter Base package for postgres_exporter   pgmonitor-pg##-extras Crunchy optimized configurations for postgres_exporter. Note that each major version of PostgreSQL has its own extras package (pgmonitor-pg96-extras, pgmonitor-pg10-extras, etc)   pgmonitor-node_exporter-extras Crunchy optimized configurations for node_exporter   pg_bloat_check Package for pg_bloat_check script    Without Packages For non-package installations, the exporters \u0026amp; pg_bloat_check can be downloaded from their respective repositories:\n   Library      node_exporter https://github.com/prometheus/node_exporter/releases   postgres_exporter https://github.com/wrouesnel/postgres_exporter/releases   pg_bloat_check https://github.com/keithf4/pg_bloat_check    User and Configuration Directory Installation You will need to create a user named ccp_monitoring which you can do with the following command:\nsudo useradd ccp_monitoring Create a folder in /var/lib/ and set its permissions as such:\nsudo mkdir /var/lib/ccp_monitoring sudo chmod 0700 /var/lib/ccp_monitoring sudo chown ccp_monitoring /var/lib/ccp_monitoring Configuration File Installation All executables are expected to be in the /usr/bin directory. A base node_exporter systemd file is expected to be in place already. An example one can be found here:\nhttps://github.com/lest/prometheus-rpm/tree/master/node_exporter\nThe files contained in this repository are assumed to be installed in the following locations with the following names. In the instructions below, you should replace a double-hash (##) with the two-digit major version of PostgreSQL you are running (ex: 95, 96, 10, etc.).\nnode_exporter The node_exporter data directory should be /var/lib/ccp_monitoring/node_exporter and owned by the ccp_monitoring user. You can set it up with:\nsudo mkdir /var/lib/ccp_monitoring/node_exporter sudo chmod 0700 /var/lib/ccp_monitoring/node_exporter sudo chown ccp_monitoring /var/lib/ccp_monitoring/node_exporter The following pgmonitor configuration files should be placed according to the following mapping:\n   pgmonitor Configuration File System Location     node/crunchy-node-exporter-service-el7.conf /etc/systemd/system/node_exporter.service.d/crunchy-node-exporter-service-el7.conf   node/sysconfig.node_exporter /etc/sysconfig/node_exporter    postgres_exporter The following pgmonitor configuration files should be placed according to the following mapping:\n   pgmonitor Configuration File System Location     crontab.txt /etc/postgres_exporter/##/crontab.txt   postgres/crunchy_postgres_exporter@.service /usr/lib/systemd/system/crunchy_postgres_exporter@.service   postgres/sysconfig.postgres_exporter_pg## /etc/sysconfig/postgres_exporter_pg##   postgres/setup_pg##.sql /etc/postgres_exporter/##/setup_pg##.sql   postgres/queries_pg##.yml /etc/postgres_exporter/##/queries_pg##.yml   postgres/queries_common.yml /etc/postgres_exporter/##/queries_common.yml   postgres/queries_per_db.yml /etc/postgres_exporter/##/queries_per_db.yml   postgres/queries_bloat.yml /etc/postgres_exporter/##/queries_bloat.yml    Setup Setup on RHEL/CentOS 7 Service Configuration The following files contain defaults that should enable the exporters to run effectively on your system for the purposes of using pgmonitor. You should take some time to review them.\nIf you need to modify them, see the notes in the files for more details and recommendations: - /etc/systemd/system/node_exporter.service.d/crunchy-node-exporter-service-el7.conf - /etc/sysconfig/node_exporter - /etc/sysconfig/postgres_exporter_pg##\nNote that /etc/sysconfig/postgres_exporter_pg## is the default sysconfig file for monitoring the database running on the default port 5432 and connects to the \u0026ldquo;postgres\u0026rdquo; database. If you\u0026rsquo;ve installed the pgmonitor setup to a different database, modify this file accordingly or make a new one. If you make a new one, ensure the service name you enable references this file (see the Enable Services section below ).\nDatabase Configuration General Configuration First, make sure you have installed the PostgreSQL contrib modules. You can install them with the following command:\nsudo yum install postgresql##-contrib Where ## corresponds to your current PostgreSQL version. For PostgreSQL 10 this would be:\nsudo yum install postgresql10-contrib You will need to modify your postgresql.conf configuration file to tell PostgreSQL to load shared libraries. In the default setup, this file can be found at /var/lib/pgsql/10/data/postgresql.conf.\nModify your postgresql.conf configuration file to add the following shared libraries\nshared_preload_libraries = 'pg_stat_statements,auto_explain'  You will need to restart your PostgreSQL instance for the change to take effect. Neither of the above extensions are used outside of the postgres database itself, but we find they are extremely useful to have loaded and available in the database when further diagnosis of issues is required.\nFor each database you are planning to monitor, you will need to run the following command as a PostgreSQL superuser:\nCREATE EXTENSION pg_stat_statements; If you want the pg_stat_statements extension to be available in all newly created databases, you can run the following command as a PostgreSQL superuser:\npsql -d template1 -c \u0026#34;CREATE EXTENSION pg_stat_statements;\u0026#34; Monitoring Setup    Query File Description     setup_pg##.sql Creates ccp_monitoring role with all necessary grants. Creates any extra monitoring functions required.   queries_bloat.yml postgres_exporter query file to allow bloat monitoring.   queries_common.yml postgres_exporter query file with minimal recommended queries that are common across all PG versions.   queries_per_db.yml postgres_exporter query file with queries that gather per databse stats. WARNING: If your database has many tables this can greatly increase the storage requirements for your prometheus database. If necessary, edit the query to only gather tables you are interested in statistics for. The Vacuum graph on the PostgreSQLDetails Dashboard and the CRUD_Details Dashboard use these statistics.   queries_pg##.yml postgres_exporter query file for queries that are specific to the given version of PostgreSQL.    Install the setup_pg##.sql script to all databases you will be monitoring in the cluster. The queries common to all postgres versions are contained in queries_common.yml. Major version specific queries are contained in a relevantly named file. Queries for more specialized monitoring are contained in additional files. postgres_exporter only takes a single query file as an argument for custom queries, so cat together the queries necessary into a single file.\nFor example, to use just the common queries for PostgreSQL 9.6 do the following. Note the location of the final queries file is based on the major version installed. The exporter service will look in the relevant version folder in the /etc/postgres_exporter directory:\ncd /etc/postgres_exporter/96 cat queries_common.yml queries_per_db.yml queries_pg96.yml \u0026gt; queries.yml psql -f /etc/postgres_exporter/96/setup_pg96.sql As another example, to include queries for PostgreSQL 10 as well as bloat do the following:\ncd /etc/postgres_exporter/10 cat queries_common.yml queries_per_db.yml queries_pg10.yml queries_bloat.yml \u0026gt; queries.yml psql -f /etc/postgres_exporter/10/setup_pg10.sql For replica servers, the setup is the same except that the setup_pg##.sql file does not need to be run since writes cannot be done there and it was already run on the master.\nAccess Control: GRANT statements The ccp_monitoring database role (created by running the \u0026ldquo;setup_pg##.sql\u0026rdquo; file above) must be allowed to connect to all databases in the cluster. To do this, run the following command to generate the necessary GRANT statements:\nSELECT \u0026#39;GRANT CONNECT ON DATABASE \u0026#34;\u0026#39; || datname || \u0026#39;\u0026#34; TO ccp_monitoring;\u0026#39; FROM pg_database WHERE datallowconn = true; This should generate one or more statements similar to the following:\nGRANT CONNECT ON DATABASE \u0026#34;postgres\u0026#34; TO ccp_monitoring; Bloat setup Run script on the specific database(s) you will be monitoring bloat for in the cluster. See special note in crontab.txt concerning a superuser requirement for using this script\npsql -d postgres -c \u0026#34;CREATE EXTENSION pgstattuple;\u0026#34; /usr/bin/pg_bloat_check.py -c \u0026#34;host=localhost dbname=postgres user=postgres\u0026#34; --create_stats_table psql -d postgres -c \u0026#34;GRANT SELECT,INSERT,UPDATE,DELETE,TRUNCATE ON bloat_indexes, bloat_stats, bloat_tables TO ccp_monitoring;\u0026#34; The /etc/postgres_exporter/##/crontab.txt file is meant to be a guide for how you setup the ccp_monitoring crontab. You should modify crontab entries to schedule your bloat check for off-peak hours. This script is meant to be run at most, once a week. Once a month is usually good enough for most databases as long as the results are acted upon quickly.\nThe script requires being run by a database superuser by default since it must be able to run a scan on every table. If you\u0026rsquo;d like to not run it as a superuser, you will have to create a new role that has read permissions on all tables in all schemas that are to be monitored for bloat. You can then change the user in the connection string option to the script.\nEnable Services sudo systemctl enable node_exporter sudo systemctl start node_exporter sudo systemctl status node_exporter To most easily allow the possibility of multiple postgres exporters, running multiple major versions of PostgreSQL, and to avoid maintaining many similar service files, a systemd template service file is used. The name of the sysconfig EnvironmentFile to be used by the service is passed as the value after the \u0026ldquo;@\u0026rdquo; and before \u0026ldquo;.service\u0026rdquo; in the service name. The default exporter\u0026rsquo;s EnvironmentFile is named \u0026ldquo;postgres_exporter_pg##\u0026rdquo; and tied to the major version of postgres that it was installed for. Be sure to replace the ## in the below commands first!\nsudo systemctl enable crunchy_postgres_exporter@postgres_exporter_pg##.service sudo systemctl start crunchy_postgres_exporter@postgres_exporter_pg## sudo systemctl status crunchy_postgres_exporter@postgres_exporter_pg## Running multiple postgres exporters (RHEL / CentOS 7) Certain metrics are not cluster-wide, so in that case multiple exporters must be run to collect all relevant metrics. The queries_perdb.yml file contains these queries and the secondary exporter(s) can use this file to collect those metrics and avoid duplicating cluster-wide metrics. Note that some other metrics are per database as well (bloat). You can then define multiple targets for that job in Prometheus so that all the metrics are collected together. Note that the \u0026ldquo;setup*.sql\u0026rdquo; file does not need to be run on these additional databases.\ncd /etc/postgres_exporter/96 cat queries_per_db.yml queries_bloat.yml \u0026gt; queries_mydb.yml  You\u0026rsquo;ll need to create a new sysconfig environment file for the second exporter service. You can just copy the existing ones and modify the relevant lines, mainly being the port, database name, and query file\ncp /etc/sysconfig/postgres_exporter_pg## /etc/sysconfig/postgres_exporter_mydb OPT=\u0026quot;--web.listen-address=0.0.0.0:9188 --extend.query-path=/etc/postgres_exporter/96/queries_mydb.yml\u0026quot; DATA_SOURCE_NAME=\u0026quot;postgresql://ccp_monitoring@localhost:5432/mydb?sslmode=disable\u0026quot;  Since a systemd template is used for the postgres_exporter services, all you need to do is pass the sysconfig file name as part of the new service name.\nsudo systemctl enable crunchy_postgres_exporter@postgres_exporter_mydb.service sudo systemctl start cruncy_postgres_exporter@postgres_exporter_mydb sudo systemctl status crunchy_postgres_exporter@postgres_exporter_mydb  Lastly, update the Prometheus auto.d target file to include the new exporter in the same one you already had running for this system\nNote for packaging (RHEL/CENTOS 7) The service override file(s) must be placed in the relevant drop-in folder to override the default service files.\n/etc/systemd/system/node_exporter.service.d/*.conf  After a daemon-reload, systemd should automatically find these files and the crunchy services should work as intended.\nInstallation / Setup on RHEL/CentOS 6 The node_exporter and postgres_exporter services on RHEL6 require the \u0026ldquo;daemonize\u0026rdquo; package that is part of the EPEL repository. This can be turned on by running:\nsudo yum install epel-release  All setup for the exporters is the same on RHEL6 as it was for 7 with the exception of the base service files. Whereas RHEL7 uses systemd, RHEL6 uses init.d. The Crunchy RHEL6 packages will create the base service files for you\n/etc/init.d/crunchy-node-exporter /etc/init.d/crunchy-postgres-exporter  Note that these service files are managed by the package and any changes you make to them could be overwritten by future updates. If you need to customize the service files for RHEL6, it\u0026rsquo;s recommended making a copy and editing/using those.\nOr if you are setting this up manually, the repository file locations and expected directories are:\nnode/crunchy-node-exporter-el6.service -\u0026gt; /etc/init.d/crunchy-postgres-exporter postgres/crunchy-postgres-exporter-el6.service -\u0026gt; /etc/init.d/crunchy-postgres-exporter /var/run/postgres_exporter/ /var/log/postgres_exporter/ (owned by postgres_exporter service user) /var/run/node_exporter/ /var/log/node_exporter/ (owned by node_exporter service user) The same /etc/sysconfig files that are used in RHEL7 above are also used in RHEL6, so follow guidance above concerning them and the notes that are contained in the files themselves.\nOnce the files are in place, set the service to start on boot, then manually start it\nsudo chkconfig crunchy-node-exporter on sudo service crunchy-node-exporter start sudo service crunchy-node-exporter status sudo chkconfig crunchy-postgres-exporter on sudo service crunchy-postgres-exporter start sudo service crunchy-postgres-exporter status Running multiple postgres exporters (RHEL / CentOS 6) If you need to run multiple postgres_exporter services, follow the same instructions as RHEL / CentOS 7 for making a new queries_XX.yml file to only gather database specific metrics. Then follow the steps below:\n- Make a copy of the /etc/sysconfig file with a new name - Update --web.listen-address in the new sysconfig file to use a new port number - Update --extend.query-path in the new sysconfig file to point to the new query file generated - Update the DATA_SOURCE_NAME in the new sysconfig file to point to the name of the database to be monitored - Make a copy of the /etc/init.d/crunchy-postgres-exporter with a new name - Update the SYSCONFIG variable in the new init.d file to match the new sysconfig file - Update the Prometheus auto.d target file to include the new exporter in the same one you already had running for this system  Remaining steps to initialize service at boot and start it up should be the same as above for the default service.\n"
},
{
	"uri": "/grafana/",
	"title": "Setting up Grafana",
	"tags": [],
	"description": "",
	"content": " There are RPM packages available to Crunchy Data customers through the Crunchy Customer Portal. Otherwise the Grafana RPM Package can be downloaded and installed from https://grafana.com/grafana/download. There is no difference between the Crunchy provided package and the one directly from Grafana.\nInstallation Upgrading If you\u0026rsquo;d like to take advantage of the new provisioning system in Grafana 5 provided by pgmonitor 2.x, we recommend either renaming or deleting your existing datasources and dashboards so there are no issues when the provisioned versions are imported.\nWhen upgrading from pgmonitor 1.x to 2.x, note that many of the system related metric names from node_exporter have had their names changed. The new graphs provided for Grafana 5+ have taken these new names into account. Also, the top level PostgreSQL Overview dashboard no longer uses the ccp_is_ready metric, so you will have to include some new postgres_exporter metrics for that dashboard to work.\nWith RPM Packages There are RPM packages available to Crunchy Data customers through the Crunchy Customer Portal.\nIf you install the below available packages with RPM, you can continue reading at the Setup section.\nAvailable Packages    Package Name Description     grafana Base package for grafana   pgmonitor-grafana-extras Crunchy configurations for datasource \u0026amp; dashboard provisioning    Without Packages Create the following directories on your grafana server if they don\u0026rsquo;t exist:\nmkdir -p /etc/grafana/provisioning/datasources mkdir -p /etc/grafana/provisioning/dashboards mkdir -p /etc/grafana/crunchy_dashboards     pgmonitor Configuration File System Location     grafana/crunchy_grafana_datasource.yml /etc/grafana/provisioning/datasources/datasource.yml   grafana/crunchy_grafana_dashboards.yml /etc/grafana/provisioning/dashboards/dashboards.yml    Review the crunchy_grafana_datasource.yml file to ensure it is looking at your Prometheus database. The included file assumes Grafana and Prometheus are running on the same system. DO NOT CHANGE the datasource \u0026ldquo;name\u0026rdquo; if you will be using the dashboards provided in this repo. They assume that name and will not work otherwise. Any other options can be changed as needed. Save the crunchy_grafana_datasource.yml file and rename to /etc/grafana/provisioning/datasources/datasources.yml. Restart grafana and confirm through the web interface that the datasource was provisioned and working.\nReview the crunchy_grafana_dashboards.yml file to ensure it\u0026rsquo;s looking at where you stored the provided dashboards. By default it is looking in /etc/grafana/crunchy_dashboards. Save this file and rename to /etc/grafana/provisioning/dashboards/dashboards.yml. Restart grafana so it picks up the new config.\nSave all of the .json dashboard files to the /etc/grafana/crunchy_dashboards folder.\nSetup Configuration Database By default Grafana uses an SQLite database to store configuration and dashboard information. We recommend using a PostgreSQL database for better long term scalability. Before doing any further configuration, including changing the default admin password, set the grafana.ini to point to a postgresql instance that has a database created for it.\nIn psql run the following:\nCREATE ROLE grafana WITH LOGIN; CREATE DATABASE grafana; ALTER DATABASE grafana OWNER TO grafana; \\password grafana  You may also need to adjust your pg_hba.conf to allow grafana to connect to your database.\nIn your grafana.ini, set the following options at a minimum with relevant values:\n[database] type = postgres host = 127.0.0.1:5432 name = grafana user = grafana password = \u0026quot;\u0026quot;\u0026quot;mypassword\u0026quot;\u0026quot;\u0026quot;  Now enable and start the grafana service\nsudo systemctl enable grafana-server sudo systemctl start grafana-server sudo systemctl status grafana-server  Navigate to the web interface: https://\u0026lt;ip-address\u0026gt;:3000. Log in with admin/admin (be sure to change the admin password) and check settings to ensure the postgres options have been set and are working.\nDatasource \u0026amp; Dashboard Provisioning Grafana 5.x provides the ability to automatically provision datasources and dashboards via configuration files instead of having to manually import them either through the web interface or the API. Note that provisioned dashboards can no longer be directly edited and saved via the web interface. See the Grafana documentation for how to edit/save provisioned dashboards: http://docs.grafana.org/administration/provisioning/#making-changes-to-a-provisioned-dashboard. If you\u0026rsquo;d like to customize these dashboards, we recommend first adding them via provisioning then exporting and importing manually via the web interface.\nThe extras package takes care of putting all these files in place. If you did not use the crunchy package to install grafana, see the additional instructions above. Once that is done, the only additional setup that needs to be done is to set the \u0026ldquo;provisioning\u0026rdquo; option in the grafana.ini to point to the top level directory if it hasn\u0026rsquo;t been done already. If you\u0026rsquo;re upgrading from Grafana 4.x to 5.x, you will have to add the \u0026ldquo;provisioning\u0026rdquo; option to the [paths] section of the grafana.ini file. Once that is done, just restart grafana and all datasources and dashboards should appear.\n[paths] provisioning = /etc/grafana/provisioning  "
},
{
	"uri": "/prometheus/",
	"title": "Setting up Prometheus",
	"tags": [],
	"description": "",
	"content": " Prometheus can be set up on any Linux-based system, but the instructions below use RHEL/CentOS 7.\n Installation Setup  RHEL / CentOS 7   Installation Upgrading When upgrading from pgmonitor 1.x to 2.x, note that the alerting rules for node_exporter metrics have had many of their names changed. If you\u0026rsquo;ve changed the provided alerting rules file, installing the new package should create a file called /etc/prometheus/crunchy-alert-rules.yml.rpmnew and not overwrite your current file. You should be able to copy the new rules as needed from there.\nInstallation on RHEL/CentOS 7 With RPM Packages There are RPM packages available to Crunchy Data customers through the Crunchy Customer Portal.\nIf you install the below available packages with RPM, you can continue reading at the Setup section.\nAvailable Packages    Package Name Description     alertmanager Base package for the Alertmanager   prometheus2 Base package for Prometheus 2.x   pgmonitor-alertmanager-extras Custom Crunchy configurations for Alertmanager   pgmonitor-prometheus-extras Custom Crunchy configurations for Prometheus    Without Crunchy Data Packages For installations without using packages provided by Crunchy Data, we recommend using the repository maintained at https://github.com/lest/prometheus-rpm. Instructions for setup and installation are contained there. Note this only sets up the base service. The additional files and steps for pgmonitor still need to be set up as instructed below.\nOr you can also download Prometheus and Alertmanager from the original site at https://prometheus.io/download. Note that no base service setup is provided here, just the binaries.\nMinimum Versions pgmonitor assumes to be using Prometheus 2.x. We recommend to always use the latest minor version of Prometheus.\nUser and Configuration Directory Installation You will need to create a user named ccp_monitoring which you can do with the following command:\nsudo useradd ccp_monitoring Create a folder in /var/lib/ and set its permissions as such:\nsudo mkdir /var/lib/ccp_monitoring sudo chmod 0700 /var/lib/ccp_monitoring sudo chown ccp_monitoring /var/lib/ccp_monitoring Configuration File Installation The files contained in this repository are assumed to be installed in the following locations with the following names:\nPrometheus The Prometheus data directory should be /var/lib/ccp_monitoring/prometheus and owned by the ccp_monitoring user. You can set it up with:\nsudo mkdir /var/lib/ccp_monitoring/prometheus sudo chmod 0700 /var/lib/ccp_monitoring/prometheus sudo chown ccp_monitoring /var/lib/ccp_monitoring/prometheus The following pgmonitor configuration files should be placed according to the following mapping:\n   pgmonitor Configuration File System Location     crunchy-prometheus-service-el7.conf /etc/systemd/system/prometheus.service.d/crunchy-prometheus-service-el7.conf   sysconfig.prometheus /etc/sysconfig/prometheus   crunchy-prometheus.yml /etc/prometheus/crunchy-prometheus.yml   auto.d/ProductionDB.yml.example /etc/prometheus/auto.d/ProductionDB.yml.example   crunchy-alertmanager.yml /etc/prometheus/crunchy-alertmanager.yml   crunchy-alert-rules.yml /etc/prometheus/crunchy-alert-rules.yml    Alertmanager The Alertmanager data directory should be /var/lib/ccp_monitoring/alertmanager and owned by the ccp_monitoring user. You can set it up with:\nsudo mkdir /var/lib/ccp_monitoring/alertmanager sudo chmod 0700 /var/lib/ccp_monitoring/alertmanager sudo chown ccp_monitoring /var/lib/ccp_monitoring/alertmanager The following pgmonitor configuration files should be placed according to the following mapping:\n   pgmonitor Configuration File System Location     crunchy-alertmanager-service-el7.conf /etc/systemd/system/alertmanager.service.d/crunchy-alertmanager-service-el7.conf   sysconfig.alertmanager /etc/sysconfig/alertmanager    Setup Setup on RHEL/CentOS 7 Service Configuration The following files contain defaults that should enable Prometheus and Alertmanager to run effectively on your system for the purposes of using pgmonitor. You should take some time to review them.\nIf you need to modify them, see the notes in the files for more details and recommendations:\n /etc/systemd/system/prometheus.service.d/crunchy-prometheus-service-el7.conf /etc/systemd/system/alertmanager.service.d/crunchy-alertmanager-service-el7.conf  The below files contain startup properties for Prometheues and Alertmanager. Please review and modify these files as you see fit:\n /etc/sysconfig/prometheus /etc/sysconfig/alertmanager  The below files dictate how Prometheus and Alertmanager will behave at runtime for the purposes of using pgmonitor. Please review each file below and follow the instructions in order to set things up:\n   File Instructions     /etc/prometheus/crunchy-prometheus.yml Modify to set scrape interval if different from the default of 30s. Activate alert rules and Alertmanager by uncommenting lines when set as needed. Default service expects config file to be named crunchy-prometheus.yml   /etc/prometheus/crunchy-alertmanager.yml Setup alert target (e.g., SMTP, SMS, etc.), receiver and route information. Default service expects config file to be named crunchy-alertmanager.yml   /etc/prometheus/crunchy-alert-rules.yml Update rules as needed. Default Prometheus config expects file to be named crunchy-alert-rules.yml   /etc/prometheus/auto.d/*.yml You will need at least one file with a final .yml extension. Copy the example file to create as many additional targets as needed. Ensure the configuration files you want to use do not end in .yml.example but only with .yml.    Enable Services To enable and start Prometheus as a service, execute the following commands:\nsudo systemctl enable prometheus sudo systemctl start prometheus sudo systemctl status prometheus To enable and start Alertmanager as a service, execute the following commands:\nsudo systemctl enable alertmanager sudo systemctl start alertmanager sudo systemctl status alertmanager Note for packaging (RHEL/CentOS 7) The service override files must be placed in the relevant drop-in folder to override the default service files.\n/etc/systemd/system/prometheus.service.d/crunchy-prometheus-service.conf /etc/systemd/system/alertmanager.service.d/crunchy-alertmanager-service.conf  After a daemon-reload, systemd should automatically find these files and the crunchy services should work as intended.\nSetup on RHEL/CentOS 6 Detailed instructions coming soon.\n"
},
{
	"uri": "/contributing/",
	"title": "Contributing",
	"tags": [],
	"description": "",
	"content": " Getting Started Welcome! Thank you for your interest in contributing. Before submitting a new issue or pull request to the pgmonitor project on GitHub, please review any open or closed issues here in addition to any existing open pull requests.\nDocumentation The documentation website is generated using Hugo and GitHub Pages.\nHosting Hugo Locally (Optional) If you would like to build the documentation locally, view the official Installing Hugo guide to set up Hugo locally. You can then start the server by running the following commands -\ncd $CCPROOT/hugo/ vi config.toml hugo server The local version of the Hugo server is accessible by default from localhost:1313. Once you\u0026rsquo;ve run hugo server, that will let you interactively make changes to the documentation as desired and view the updates in real-time.\nContributing to the Documentation When you\u0026rsquo;re ready to commit a change, please view and run the script located in the root folder labeled generate-docs.sh which will automatically generate a new set of webpages using Hugo that will update the live website after the change has been committed to the repository.\n"
},
{
	"uri": "/",
	"title": "",
	"tags": [],
	"description": "",
	"content": " pgmonitor pgmonitor is your all-in-one tool to easily create an environment to visualize the health and performance of your PostgreSQL cluster. pgmonitor combines a suite of tools to facilitate the collection and visualization of important metrics that you need be aware of in your PostgreSQL database and your host environment, including:\n Connection counts: how busy is your system being accessed and if connections are hanging Database size: how much disk your cluster is using Replication lag: know if your replicas are falling behind in loading data from your primary Transaction wraparound: don\u0026rsquo;t let your PostgreSQL database stop working Bloat: how much extra space are your tables and indexes using System metrics: CPU, Memory, I/O, uptime  pgmonitor is also highly configurable, and advanced users can design their own metrics, visualizations, and add in other features such as alerting.\nRunning pgmonitor will give you confidence in understanding how well your PostgreSQL cluster is performing, and will provide you the information to make calculated adjustments to your environment.\nContents  Purpose Supported Platforms  Operating Systems PostgreSQL  Installation Roadmap Version History Sponsors Legal Notices  Purpose pgmonitor is an open-source monitoring solution for PostgreSQL and the systems that it runs on. pgmonitor came from the need to provide a way to easily create a visual environment to monitor all the metrics a database administrator needs to proactively ensure the health of the system.\npgmonitor combines multiple open-source software packages and necessary configuration to create a robust PostgreSQL monitoring environment. These include:\n Prometheus - an open-source metrics collector that is highly customizable. Grafana - an open-source data visualizer that allows you to generate many different kinds of charts and graphs. PostgreSQL Exporter - an open-source data export to Prometheus that supports collecting metrics from any PostgreSQL server version 9.1 and above.  Supported Platforms Operating Systems  Prometheus/Alertmanager \u0026amp; Grafana: CentOS/RHEL 7 or greater Exporters (node \u0026amp; postgres): CentOS/RHEL 6 or greater  PostgreSQL  pgmonitor plans to support all PostgreSQL versions that are actively supported by the PostgreSQL community. Once a major version of PostgreSQL reaches its end-of-life (EOL), pgmonitor will cease supporting that major version. 11, 10, 9.6, 9.5, 9.4  Known issues  PostgreSQL 10+ SCRAM-SHA-256 encrypted password are not yet supported by underlying go library used by postgres_exporter.  Installation Each step in the installation process is listed here, with a link to additional to further installation instructions for each package.\n1. Prometheus 2. exporter 3. Grafana Roadmap  Additional monitoring metrics out-of-the-box Improved visualizations Project build testing  Version History For the full history of pgmonitor, please see the CHANGELOG.\nSponsors Crunchy Data is pleased to sponsor pgmonitor and many other open-source projects to help promote support the PostgreSQL community and software ecosystem.\nLegal Notices Copyright © 2018 Crunchy Data Solutions, Inc.\nCRUNCHY DATA SOLUTIONS, INC. PROVIDES THIS GUIDE \u0026ldquo;AS IS\u0026rdquo; WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF NON INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\nCrunchy, Crunchy Data Solutions, Inc. and the Crunchy Hippo Logo are trademarks of Crunchy Data Solutions, Inc.\n"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]