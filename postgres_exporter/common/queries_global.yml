###
#
# Copyright Â© 2017-2023 Crunchy Data Solutions, Inc. All Rights Reserved.
#
# Begin File: queries_global.yml
#
###

ccp_postgresql_version:
  query: "SELECT current_setting('server_version_num')::int AS current"
  metrics:
    - current: 
        usage: "GAUGE"
        description: "The current version of PostgreSQL that this exporter is running on as a 6 digit integer (######)."


ccp_is_in_recovery:
  query: "SELECT CASE WHEN pg_is_in_recovery = true THEN 1 ELSE 2 END AS status from pg_is_in_recovery();"
  metrics:
    - status:
        usage: "GAUGE"
        description: "Return value of 1 means database is in recovery. Otherwise 2 it is a primary."

ccp_locks:
    query: "SELECT pg_database.datname as dbname, tmp.mode, COALESCE(count,0) as count
                        FROM
                                (
                                  VALUES ('accesssharelock'),
                                         ('rowsharelock'),
                                         ('rowexclusivelock'),
                                         ('shareupdateexclusivelock'),
                                         ('sharelock'),
                                         ('sharerowexclusivelock'),
                                         ('exclusivelock'),
                                         ('accessexclusivelock')
                                ) AS tmp(mode) CROSS JOIN pg_catalog.pg_database
                        LEFT JOIN
                          (SELECT database, lower(mode) AS mode,count(*) AS count
                          FROM pg_catalog.pg_locks WHERE database IS NOT NULL
                          GROUP BY database, lower(mode)
                        ) AS tmp2
                        ON tmp.mode=tmp2.mode and pg_database.oid = tmp2.database"
    metrics:
        - dbname:
            usage: "LABEL"
            description: "Database name"
        - mode:
            usage: "LABEL"
            description: "Lock type"
        - count:
            usage: "GAUGE"
            description: "Number of locks"


ccp_postmaster_runtime:
  query: "SELECT extract('epoch' from pg_postmaster_start_time) as start_time_seconds from pg_catalog.pg_postmaster_start_time()"
  metrics:
    - start_time_seconds:
        usage: "GAUGE"
        description: "Time at which postmaster started. Note this metric has been deprecated as of pgMonitor 4.3 and will be removed in a future version. Use ccp_postmaster_uptime_seconds instead."

ccp_settings_gauge:
  query: "select (select setting::int from pg_catalog.pg_settings where name = 'checkpoint_timeout') as checkpoint_timeout
            , (select setting::float from pg_catalog.pg_settings where name = 'checkpoint_completion_target') as checkpoint_completion_target
            , (select 8192*setting::bigint as bytes from pg_catalog.pg_settings where name = 'shared_buffers') as shared_buffers"
  metrics:
    - checkpoint_timeout:
        usage: "GAUGE"
        description: "Checkpoint timeout in seconds"
    - checkpoint_completion_target:
        usage: "GAUGE"
        description: "Checkpoint completion target, ranging from 0 to 1"
    - shared_buffers:
        usage: "GAUGE"
        description: "Size of shared_buffers in bytes"


ccp_stat_bgwriter:
    query: "SELECT checkpoints_timed, checkpoints_req, checkpoint_write_time, checkpoint_sync_time, buffers_checkpoint, buffers_clean, maxwritten_clean, buffers_backend, buffers_backend_fsync, buffers_alloc, stats_reset FROM pg_catalog.pg_stat_bgwriter"
    metrics:
      - checkpoints_timed:
            usage: "GAUGE"
            description: "Number of scheduled checkpoints that have been performed"
      - checkpoints_req:
            usage: "GAUGE"
            description: "Number of requested checkpoints that have been performed"
      - checkpoint_write_time:
            usage: "GAUGE"
            description: "Total amount of time that has been spent in the portion of checkpoint processing where files are written to disk, in milliseconds"
      - checkpoint_sync_time:
            usage: "GAUGE"
            description: "Total amount of time that has been spent in the portion of checkpoint processing where files are synchronized to disk, in milliseconds"
      - buffers_checkpoint:
            usage: "GAUGE"
            description: "Number of buffers written during checkpoints"
      - buffers_clean:
            usage: "GAUGE"
            description: "Number of buffers written by the background writer"
      - maxwritten_clean:
            usage: "GAUGE"
            description: "Number of times the background writer stopped a cleaning scan because it had written too many buffers"
      - buffers_backend:
            usage: "GAUGE"
            description: "Number of buffers written directly by a backend"
      - buffers_backend_fsync:
            usage: "GAUGE"
            description: "Number of times a backend had to execute its own fsync call (normally the background writer handles those even when the backend does its own write)"
      - buffers_alloc:
            usage: "GAUGE"
            description: "Number of buffers allocated"
      - stats_reset:
            usage: "GAUGE"
            description: "Time at which these statistics were last reset"


ccp_stat_database:
    query: "SELECT s.datname as dbname, xact_commit, xact_rollback, blks_read, blks_hit, tup_returned, tup_fetched, tup_inserted, tup_updated, tup_deleted, conflicts, temp_files, temp_bytes, deadlocks FROM pg_catalog.pg_stat_database s JOIN pg_catalog.pg_database d on d.datname = s.datname WHERE d.datistemplate = false"
    metrics:
        - dbname:
            usage: "LABEL"
            description: "Name of database"
        - xact_commit: 
            usage: "GAUGE"
            description: "Number of transactions in this database that have been committed"
        - xact_rollback: 
            usage: "GAUGE"
            description: "Number of transactions in this database that have been rolled back"
        - blks_read:
            usage: "GAUGE"
            description: "Number of disk blocks read in this database"
        - blks_hit:
            usage: "GAUGE"
            description: "Number of times disk blocks were found already in the buffer cache, so that a read was not necessary"
        - tup_returned:
            usage: "GAUGE"
            description: "Number of rows returned by queries in this database"
        - tup_fetched:
            usage: "GAUGE"
            description: "Number of rows fetched by queries in this database"
        - tup_inserted:
            usage: "GAUGE"
            description: "Number of rows inserted by queries in this database"
        - tup_updated:
            usage: "GAUGE"
            description: "Number of rows updated by queries in this database"
        - tup_deleted:
            usage: "GAUGE"
            description: "Number of rows deleted by queries in this database"
        - conflicts:
            usage: "GAUGE"
            description: "Number of queries canceled due to conflicts with recovery in this database"
        - temp_files:
            usage: "GAUGE"
            description: "Number of rows deleted by queries in this database"
        - temp_bytes:
            usage: "GAUGE"
            description: "Total amount of data written to temporary files by queries in this database"
        - deadlocks:
            usage: "GAUGE"
            description: "Number of deadlocks detected in this database"


ccp_transaction_wraparound:
  query: "WITH max_age AS ( SELECT 2000000000 as max_old_xid, setting AS autovacuum_freeze_max_age FROM pg_catalog.pg_settings WHERE name = 'autovacuum_freeze_max_age'), per_database_stats AS ( SELECT datname , m.max_old_xid::int , m.autovacuum_freeze_max_age::int , age(d.datfrozenxid) AS oldest_current_xid FROM pg_catalog.pg_database d JOIN max_age m ON (true) WHERE d.datallowconn) SELECT max(oldest_current_xid) AS oldest_current_xid , max(ROUND(100*(oldest_current_xid/max_old_xid::float))) AS percent_towards_wraparound , max(ROUND(100*(oldest_current_xid/autovacuum_freeze_max_age::float))) AS percent_towards_emergency_autovac FROM per_database_stats"
  metrics:
    - oldest_current_xid:
        usage: "GAUGE"
        description: "Oldest current transaction ID in cluster"
    - percent_towards_wraparound:
        usage: "GAUGE"
        description: "Percentage towards transaction ID wraparound"
    - percent_towards_emergency_autovac:
        usage: "GAUGE"
        description: "Percentage towards emergency autovacuum process starting"


ccp_archive_command_status:
    query: "SELECT CASE 
                WHEN EXTRACT(epoch from (last_failed_time - last_archived_time)) IS NULL THEN 0
                WHEN EXTRACT(epoch from (last_failed_time - last_archived_time)) < 0 THEN 0
                ELSE EXTRACT(epoch from (last_failed_time - last_archived_time)) 
                END AS seconds_since_last_fail
            , EXTRACT(epoch from (CURRENT_TIMESTAMP - last_archived_time)) AS seconds_since_last_archive
            , archived_count
            , failed_count
            FROM pg_catalog.pg_stat_archiver"
    metrics:
        - seconds_since_last_fail:
            usage: "GAUGE"
            description: "Seconds since the last recorded failure of the archive_command"
        - seconds_since_last_archive:
            usage: "GAUGE"
            description: "Seconds since the last successful archive operation"
        - archived_count:
            usage: "GAUGE"
            description: "Number of WAL files that have been successfully archived"
        - failed_count:
            usage: "GAUGE"
            description: "Number of failed attempts for archiving WAL files"


ccp_sequence_exhaustion:
    query: "SELECT count FROM monitor.sequence_exhaustion(75)"
    metrics:
        - count:
            usage: "GAUGE"
            description: "Count of sequences that have reached greater than or equal to 75% of their max available numbers. Function monitor.sequence_status() can provide more details if run directly on system."


ccp_postmaster_uptime:
    query: "SELECT extract(epoch from (clock_timestamp() - pg_postmaster_start_time() )) AS seconds;"
    metrics:
        - seconds:
            usage: "GAUGE"
            description: "Time interval in seconds since PostgreSQL database was last restarted"


ccp_pg_settings_checksum:
    query: "SELECT monitor.pg_settings_checksum() AS status" 
    metrics:
        - status:
            usage: "GAUGE"
            description: "Value of checksum monitioring status for pg_catalog.pg_settings (postgresql.conf). 0 = valid config. 1 = settings changed. To reset current config to valid after alert, run monitor.pg_settings_checksum_set_valid()."


ccp_settings_pending_restart:
  query: "SELECT count(*) AS count FROM pg_catalog.pg_settings WHERE pending_restart = true"
  metrics:
    - count:
        usage: "GAUGE"
        description: "Number of settings from pg_settings catalog in a pending_restart state"


ccp_replication_lag:
  query: "SELECT
           CASE
           WHEN (pg_last_wal_receive_lsn() = pg_last_wal_replay_lsn()) OR (pg_is_in_recovery() = false) THEN 0
           ELSE EXTRACT (EPOCH FROM clock_timestamp() - pg_last_xact_replay_timestamp())::INTEGER
           END
        AS replay_time
        ,  CASE
           WHEN pg_is_in_recovery() = false THEN 0
           ELSE EXTRACT (EPOCH FROM clock_timestamp() - pg_last_xact_replay_timestamp())::INTEGER
           END
        AS received_time"
  metrics:
    - replay_time:
        usage: "GAUGE"
        description: "Length of time since the last transaction was replayed on replica. Returns zero if last WAL recieved equals last WAL replayed. Avoids false positives when primary stops writing. Monitors for replicas that cannot keep up with primary WAL generation."
    - received_time:
        usage: "GAUGE"
        description: "Length of time since the last WAL file was received and replayed on replica. Always increases, possibly causing false positives if the primary stops writing. Monitors for replicas that stop receiving WAL all together."


ccp_connection_stats:
  query: "select ((total - idle) - idle_in_txn) as active
        , total
        , idle
        , idle_in_txn
        , (select coalesce(extract(epoch from (max(clock_timestamp() - state_change))),0) from pg_catalog.pg_stat_activity where state = 'idle in transaction') as max_idle_in_txn_time
        , (select coalesce(extract(epoch from (max(clock_timestamp() - query_start))),0) from pg_catalog.pg_stat_activity where backend_type = 'client backend' and state <> 'idle' ) as max_query_time
        , (select coalesce(extract(epoch from (max(clock_timestamp() - query_start))),0) from pg_catalog.pg_stat_activity where backend_type = 'client backend' and wait_event_type = 'Lock' ) as max_blocked_query_time
        , max_connections
        from (
                select count(*) as total
                        , coalesce(sum(case when state = 'idle' then 1 else 0 end),0) as idle
                        , coalesce(sum(case when state = 'idle in transaction' then 1 else 0 end),0) as idle_in_txn from pg_catalog.pg_stat_activity) x
        join (select setting::float AS max_connections FROM pg_settings WHERE name = 'max_connections') xx ON (true);"
  metrics:
    - active:
        usage: "GAUGE"
        description: "Total non-idle connections"
    - total:
        usage: "GAUGE"
        description: "Total idle and non-idle connections"
    - idle:
        usage: "GAUGE"
        description: "Total idle connections"
    - idle_in_txn:
        usage: "GAUGE"
        description: "Total idle in transaction connections"
    - max_idle_in_txn_time:
        usage: "GAUGE"
        description: "Length of time in seconds of the longest idle in transaction session"
    - max_query_time:
        usage: "GAUGE"
        description: "Length of time in seconds of the longest running query"
    - max_blocked_query_time:
        usage: "GAUGE"
        description: "Length of time in seconds of the longest running query that has been blocked by a heavyweight lock"
    - max_connections:
        usage: "GAUGE"
        description: "Value of max_connections for the monitored database"


ccp_replication_lag_size:
  query: "SELECT client_addr as replica
        , client_hostname as replica_hostname
        , client_port as replica_port
        , pg_wal_lsn_diff(sent_lsn, replay_lsn) as bytes 
        FROM pg_catalog.pg_stat_replication"
  metrics:
    - replica:
        usage: "LABEL"
        description: "Replica address"
    - replica_hostname:
        usage: "LABEL"
        description: "Replica hostname"
    - replica_port:
        usage: "LABEL"
        description: "Replica port"
    - bytes:
        usage: "GAUGE"
        description: "Replication lag in bytes"


ccp_replication_slots:
  query: "SELECT slot_name, active::int, pg_wal_lsn_diff(CASE WHEN pg_is_in_recovery() THEN pg_last_wal_replay_lsn() ELSE pg_current_wal_insert_lsn() END, restart_lsn) AS retained_bytes FROM pg_catalog.pg_replication_slots"
  metrics:
    - slot_name:
        usage: "LABEL"
        description: "Name of replication slot"
    - active: 
        usage: "GAUGE" 
        description: "Active state of slot. 1 = true. 0 = false."
    - retained_bytes:
        usage: "GAUGE"
        description: "The amount of WAL (in bytes) being retained for this slot"


ccp_wal_activity:
  query: "SELECT last_5_min_size_bytes,
      (SELECT COALESCE(sum(size),0) FROM pg_catalog.pg_ls_waldir()) AS total_size_bytes
      FROM (SELECT COALESCE(sum(size),0) AS last_5_min_size_bytes FROM pg_catalog.pg_ls_waldir() WHERE modification > CURRENT_TIMESTAMP - '5 minutes'::interval) x;"
  metrics:
    - last_5_min_size_bytes:
        usage: "GAUGE"
        description: "Current size in bytes of the last 5 minutes of WAL generation. Includes recycled WALs."
    - total_size_bytes:
        usage: "GAUGE"
        description: "Current size in bytes of the WAL directory"


ccp_pg_hba_checksum:
    query: "SELECT monitor.pg_hba_checksum() AS status" 
    metrics:
        - status:
            usage: "GAUGE"
            description: "Value of checksum monitioring status for pg_catalog.pg_hba_file_rules (pg_hba.conf). 0 = valid config. 1 = settings changed. To reset current config to valid after alert, run monitor.pg_hba_checksum_set_valid()."


###
#
# End File: queries_global.yml
#
###
