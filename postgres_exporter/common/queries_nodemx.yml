###
#
# Begin File: queries_nodemx.yml
#
###
ccp_nodemx_network:
  query: "SELECT interface,tx_bytes,tx_packets, rx_bytes,rx_packets from monitor.proc_network_stats()"
  metrics:
    - interface:
        usage: "LABEL"
    - tx_bytes:
        usage: "GAUGE"
        description: "Number of bytes transmitted"
    - tx_packets:
        usage: "GAUGE"
        description: "Number of packets transmitted"
    - rx_bytes:
        usage: "GAUGE"
        description: "Number of bytes received"
    - rx_packets:
        usage: "GAUGE"
        description: "Number of packets received"

ccp_nodemx_process:
  query: "SELECT monitor.cgroup_process_count() as count"
  metrics:
    - count:
        usage: "GAUGE"
        description: "Total number of database processes"


ccp_nodemx_mem:
  query: "WITH d(key, val) as (SELECT key, val FROM monitor.cgroup_setof_kv('memory.stat'))
SELECT
  monitor.kdapi_scalar_bigint('mem_request') AS request,
  CASE
    WHEN monitor.cgroup_mode() = 'legacy' THEN
        (CASE WHEN monitor.cgroup_scalar_bigint('memory.limit_in_bytes') = 9223372036854771712 THEN 0 ELSE monitor.cgroup_scalar_bigint('memory.limit_in_bytes') END)
    ELSE
        (CASE WHEN monitor.cgroup_scalar_bigint('memory.max') = 9223372036854775807 THEN 0 ELSE monitor.cgroup_scalar_bigint('memory.max') END)
  END AS limit,
  (SELECT val FROM d WHERE key='cache') as cache,
  (SELECT val FROM d WHERE key='rss') as rss,
  (SELECT val FROM d WHERE key='shmem') as shmem,
  (SELECT val FROM d WHERE key='mapped_file') as mapped_file,
  (SELECT val FROM d WHERE key='dirty') as dirty,
  (SELECT val FROM d WHERE key='active_anon') as active_anon,
  (SELECT val FROM d WHERE key='inactive_anon') as inactive_anon,
  (SELECT val FROM d WHERE key='active_file') as active_file,
  (SELECT val FROM d WHERE key='inactive_file') as inactive_file,
  CASE
    WHEN monitor.cgroup_mode() = 'legacy'
    THEN monitor.cgroup_scalar_bigint('memory.usage_in_bytes')
    ELSE monitor.cgroup_scalar_bigint('memory.current')
  END as usage_in_bytes,
  CASE
    WHEN monitor.cgroup_mode() = 'legacy'
    THEN monitor.cgroup_scalar_bigint('memory.kmem.usage_in_bytes') 
    ELSE 0
  END as kmem_usage_in_byte"
  metrics:
    - request:
        usage: "GAUGE"
        description: "Memory request value in bytes"
    - limit:
        usage: "GAUGE"
        description: "Memory limit value in bytes"
    - cache:
        usage: "GAUGE"
        description: "Total bytes of page cache memory"
    - rss:
        usage: "GAUGE"
        description: "Total bytes of anonymous and swap cache memory"
    - shmem:
        usage: "GAUGE"
        description: "Total bytes of shared memory"
    - mapped_file:
        usage: "GAUGE"
        description: "Total bytes of mapped file (includes tmpfs/shmem)"
    - dirty:
        usage: "GAUGE"
        description: "Total bytes that are waiting to get written back to the disk"
    - active_anon:
        usage: "GAUGE"
        description: "Total bytes of anonymous and swap cache memory on active LRU list"
    - inactive_anon:
        usage: "GAUGE"
        description: "Total bytes of anonymous and swap cache memory on inactive LRU list"
    - active_file:
        usage: "GAUGE"
        description: "Total bytes of file-backed memory on active LRU list"
    - inactive_file:
        usage: "GAUGE"
        description: "Total bytes of file-backed memory on inactive LRU list"
    - usage_in_bytes:
        usage: "GAUGE"
        description: "Total usage in bytes"
    - kmem_usage_in_bytes:
        usage: "GAUGE"
        description: "Total kernel memory usage in bytes"


ccp_nodemx_cpu:
  query: "SELECT monitor.kdapi_scalar_bigint('cpu_request') as request, monitor.kdapi_scalar_bigint('cpu_limit') as limit"
  metrics:
    - request:
        usage: "GAUGE"
        description: "CPU request value in milli cores"
    - limit:
        usage: "GAUGE"
        description: "CPU limit value in milli cores"

ccp_nodemx_cpucfs:
  query: "SELECT
  CASE
  WHEN monitor.cgroup_mode() = 'legacy' THEN
    monitor.cgroup_scalar_bigint('cpu.cfs_period_us')
  ELSE
    (monitor.cgroup_array_bigint('cpu.max'))[2]
  END AS period_us, 
  CASE
  WHEN monitor.cgroup_mode() = 'legacy' THEN
    GREATEST(monitor.cgroup_scalar_bigint('cpu.cfs_quota_us'), 0)
  ELSE
    GREATEST((monitor.cgroup_array_bigint('cpu.max'))[1], 0)
  END AS quota_us"
  metrics:
    - period_us:
        usage: "GAUGE"
        description: "the total available run-time within a period (in microseconds)"
    - quota_us:
        usage: "GAUGE"
        description: "the length of a period (in microseconds)"

ccp_nodemx_cpuacct:
  query: "SELECT CASE WHEN monitor.cgroup_mode() = 'legacy'
  THEN monitor.cgroup_scalar_bigint('cpuacct.usage')
  ELSE (SELECT val FROM monitor.cgroup_setof_kv('cpu.stat') where key = 'usage_usec') * 1000
  END AS usage,
  clock_timestamp() AS usage_ts"
  metrics:
    - usage:
        usage: "GAUGE"
        description: "CPU usage in nanoseconds"
    - usage_ts:
        usage: "GAUGE"
        description: "CPU usage snapshot timestamp"

ccp_nodemx_cpustat:
  query: "WITH d(key, val) AS
(select key, val from monitor.cgroup_setof_kv('cpu.stat'))
SELECT
 (SELECT val FROM d WHERE key='nr_periods') AS nr_periods,
 (SELECT val FROM d WHERE key='nr_throttled') AS nr_throttled,
 (SELECT val FROM d WHERE key='throttled_time') AS throttled_time, clock_timestamp() as snap_ts"
  metrics:
    - nr_periods:
        usage: "GAUGE"
        description: "number of periods that any thread was runnable"
    - nr_throttled:
        usage: "GAUGE"
        description: "number of runnable periods in which the application used its entire quota and was throttled"
    - throttled_time:
        usage: "GAUGE"
        description: "sum total amount of time individual threads within the monitor.cgroup were throttled"
    - snap_ts:
        usage: "GAUGE"
        description: "CPU stat snapshot timestamp"

ccp_nodemx_data_disk:
  query: "SELECT mount_point,fs_type,total_bytes,available_bytes,total_file_nodes,free_file_nodes
          FROM monitor.proc_mountinfo() m
          JOIN monitor.fsinfo(m.mount_point) f USING (major_number, minor_number)
          WHERE m.mount_point IN ('/pgdata', '/pgwal') OR
                m.mount_point like '/tablespaces/%'"
  metrics:
    - mount_point:
        usage: "LABEL"
        description: "mount point"
    - fs_type:
        usage: "LABEL"
        description: "File system type"
    - total_bytes:
        usage: "GAUGE"
        description: "Size in bytes"
    - available_bytes:
        usage: "GAUGE"
        description: "Available size in bytes"
    - total_file_nodes:
        usage: "GAUGE"
        description: "Total file nodes"
    - free_file_nodes:
        usage: "GAUGE"
        description: "Available file nodes"

ccp_nodemx_disk_activity:
  query: "SELECT mount_point,sectors_read,sectors_written
          FROM monitor.proc_mountinfo() m
          JOIN monitor.proc_diskstats() d USING (major_number, minor_number)
          WHERE m.mount_point IN ('/pgdata', '/pgwal') OR
                m.mount_point like '/tablespaces/%'"
  metrics:
    - mount_point:
        usage: "LABEL"
        description: "mount point"
    - sectors_read:
        usage: "GAUGE"
        description: "Total sectors read"
    - sectors_written:
        usage: "GAUGE"
        description: "Total sectors writen"

###
#
# End File: queries_nodemx.yml
#
###
