collector_name: crunchy_global

metrics:
  - metric_name: ccp_archive_command_status_seconds_since_last_fail
    type: gauge
    help: "Seconds since the last recorded failure of the archive_command"
    values: [seconds_since_last_fail]
    query_ref: ccp_archive_command_status
  - metric_name: ccp_archive_command_status_seconds_since_last_archive
    type: gauge
    help: "Seconds since the last successful archive operation"
    values: [seconds_since_last_archive]
    query_ref: ccp_archive_command_status
  - metric_name: ccp_archive_command_status_archived_count
    type: gauge
    help: "Number of WAL files that have been successfully archived"
    values: [archived_count]
    query_ref: ccp_archive_command_status
  - metric_name: ccp_archive_command_status_failed_count
    type: gauge
    help: "Number of failed attempts for archiving WAL files"
    values: [failed_count]
    query_ref: ccp_archive_command_status


  - metric_name: ccp_connection_stats_active
    type: gauge
    help: "Total non-idle connections"
    values: [active]
    query_ref: ccp_connection_stats
  - metric_name: ccp_connection_stats_total
    type: gauge
    help: "Total idle and non-idle connections"
    values: [total]
    query_ref: ccp_connection_stats
  - metric_name: ccp_connection_stats_idle
    type: gauge
    help: "Total idle connections"
    values: [idle]
    query_ref: ccp_connection_stats
  - metric_name: ccp_connection_stats_idle_in_txn
    type: gauge
    help: "Total idle in transaction connections"
    values: [idle_in_txn]
    query_ref: ccp_connection_stats
  - metric_name: ccp_connection_stats_max_idle_in_txn_time
    type: gauge
    help: "Length of time in seconds of the longest idle in transaction session"
    values: [max_idle_in_txn_time]
    query_ref: ccp_connection_stats
  - metric_name: ccp_connection_stats_max_query_time
    type: gauge
    help: "Length of time in seconds of the longest running query"
    values: [max_query_time]
    query_ref: ccp_connection_stats
  - metric_name: ccp_connection_stats_max_blocked_query_time
    type: gauge
    help: "Length of time in seconds of the longest running query that has been blocked by a heavyweight lock"
    values: [max_blocked_query_time]
    query_ref: ccp_connection_stats
  - metric_name: ccp_connection_stats_max_connections
    type: gauge
    help: "Value of max_connections for the monitored database"
    values: [max_connections]
    query_ref: ccp_connection_stats


  - metric_name: ccp_database_size_bytes
    type: gauge
    help: "Database size in bytes"
    values: [bytes]
    key_labels:
      - dbname
    query_ref: ccp_database_size


  - metric_name: ccp_is_in_recovery_status
    type: gauge
    help: "Return value of 1 means database is in recovery. Otherwise 2 it is a primary."
    values: [status]
    query_ref: ccp_is_in_recovery


  - metric_name: ccp_locks_count
    type: gauge
    help: "Number of locks per mode type"
    values: [count]
    key_labels:
      - dbname
      - mode
    query_ref: ccp_locks


  - metric_name: ccp_pg_hba_checksum_status
    type: gauge
    help: "Value of checksum monitioring status for pg_catalog.pg_hba_file_rules (pg_hba.conf). 0 = valid config. 1 = settings changed. To reset current config to valid after alert, run pgmonitor_ext.pg_hba_checksum_set_valid()."
    values: [status]
    query_ref: ccp_pg_hba_checksum


  - metric_name: ccp_pg_settings_checksum_status
    type: gauge
    help: "Value of checksum monitioring status for pg_catalog.pg_settings (postgresql.conf). 0 = valid config. 1 = settings changed. To reset current config to valid after alert, run pgmonitor_ext.pg_settings_checksum_set_valid()."
    values: [status]
    query_ref: ccp_pg_settings_checksum


  - metric_name: ccp_postgresql_version_current
    type: gauge
    help: "The current version of PostgreSQL that this exporter is running on as a 6 digit integer (######)."
    values: [current]
    query_ref: ccp_postgresql_version


  - metric_name: ccp_postmaster_runtime_start_time_seconds
    type: gauge
    help: "Time at which postmaster started. Note this metric has been deprecated as of pgMonitor 4.3 and will be removed in a future version. Use ccp_postmaster_uptime_seconds instead."
    values: [start_time_seconds]
    query_ref: ccp_postmaster_runtime


  - metric_name: ccp_postmaster_uptime_seconds
    type: gauge
    help: "Time interval in seconds since PostgreSQL database was last restarted"
    values: [seconds]
    query_ref: ccp_postmaster_uptime


  - metric_name: ccp_replication_lag_received_time
    type: gauge
    help: "Length of time since the last WAL file was received and replayed on replica. Always increases, possibly causing false positives if the primary stops writing. Monitors for replicas that stop receiving WAL all together."
    values: [received_time]
    query_ref: ccp_replication_lag
  - metric_name: ccp_replication_lag_replay_time
    type: gauge
    help: "Length of time since the last transaction was replayed on replica. Returns zero if last WAL received equals last WAL replayed. Avoids false positives when primary stops writing. Monitors for replicas that cannot keep up with primary WAL generation."
    values: [replay_time]
    query_ref: ccp_replication_lag


  - metric_name: ccp_replication_lag_size_bytes
    type: gauge
    help: "Replication lag in bytes"
    values: [bytes]
    key_labels:
      - replica
      - replica_hostname
      - replica_port
    query_ref: ccp_replication_lag_size


  - metric_name: ccp_replication_slots_active
    type: gauge
    help: "Active state of slot. 1 = true. 0 = false."
    values: [active]
    key_labels:
      - slot_name
    query_ref: ccp_replication_slots
  - metric_name: ccp_replication_slots_retained_bytes
    type: gauge
    help: "The amount of WAL (in bytes) being retained for this slot"
    values: [retained_bytes]
    key_labels:
      - slot_name
    query_ref: ccp_replication_slots


  - metric_name: ccp_sequence_exhaustion_count
    type: gauge
    help: "Count of sequences that have reached greater than or equal to 75% of their max available numbers. Function monitor.sequence_status() can provide more details if run directly on system."
    values: [count]
    query_ref: ccp_sequence_exhaustion


  - metric_name: ccp_settings_pending_restart_count
    type: gauge
    help: "Number of settings from pg_settings catalog in a pending_restart state"
    values: [count]
    query_ref: ccp_settings_pending_restart


  - metric_name: ccp_stat_bgwriter_buffers_clean
    type: gauge
    help: "Number of buffers written by the background writer"
    values: [buffers_clean]
    query_ref: ccp_stat_bgwriter
  - metric_name: ccp_stat_bgwriter_maxwritten_clean
    type: gauge
    help: "Number of times the background writer stopped a cleaning scan because it had written too many buffers"
    values: [maxwritten_clean]
    query_ref: ccp_stat_bgwriter
  - metric_name: ccp_stat_bgwriter_buffers_alloc
    type: gauge
    help: "Number of buffers allocated"
    values: [buffers_alloc]
    query_ref: ccp_stat_bgwriter


  - metric_name: ccp_stat_checkpointer_num_timed
    type: gauge
    help: "Number of scheduled checkpoints that have been performed"
    values: [num_timed]
    query_ref: ccp_stat_checkpointer
  - metric_name: ccp_stat_checkpointer_num_requested
    type: gauge
    help: "Number of requested checkpoints that have been performed"
    values: [num_requested]
    query_ref: ccp_stat_checkpointer
  - metric_name: ccp_stat_checkpointer_write_time
    type: gauge
    help: "Total amount of time that has been spent in the portion of processing checkpoints and restartpoints where files are written to disk, in milliseconds"
    values: [write_time]
    query_ref: ccp_stat_checkpointer
  - metric_name: ccp_stat_checkpointer_sync_time
    type: gauge
    help: "Total amount of time that has been spent in the portion of processing checkpoints and restartpoints where files are synchronized to disk, in milliseconds"
    values: [sync_time]
    query_ref: ccp_stat_checkpointer
  - metric_name: ccp_stat_checkpointer_buffers_written
    type: gauge
    help: "Number of buffers written during checkpoints and restartpoints"
    values: [buffers_written]
    query_ref: ccp_stat_checkpointer


  - metric_name: ccp_stat_io_bgwriter_writes
    type: gauge
    help: "Number of write operations by background writers"
    values: [writes]
    query_ref: ccp_stat_io_bgwriter
  - metric_name: ccp_stat_io_bgwriter_fsyncs
    type: gauge
    help: "Number of fsync calls by background writers"
    values: [fsyncs]
    query_ref: ccp_stat_io_bgwriter


  - metric_name: ccp_stat_database_xact_commit
    type: gauge
    help: "Number of transactions in this database that have been committed"
    values: [xact_commit]
    key_labels:
      - dbname
    query_ref: ccp_stat_database
  - metric_name: ccp_stat_database_xact_rollback
    type: gauge
    help: "Number of transactions in this database that have been rolled back"
    values: [xact_rollback]
    key_labels:
      - dbname
    query_ref: ccp_stat_database
  - metric_name: ccp_stat_database_blks_read
    type: gauge
    help: "Number of disk blocks read in this database"
    values: [blks_read]
    key_labels:
      - dbname
    query_ref: ccp_stat_database
  - metric_name: ccp_stat_database_blks_hit
    type: gauge
    help: "Number of times disk blocks were found already in the buffer cache, so that a read was not necessary"
    values: [blks_hit]
    key_labels:
      - dbname
    query_ref: ccp_stat_database
  - metric_name: ccp_stat_database_tup_returned
    type: gauge
    help: "Number of rows returned by queries in this database"
    values: [tup_returned]
    key_labels:
      - dbname
    query_ref: ccp_stat_database
  - metric_name: ccp_stat_database_tup_fetched
    type: gauge
    help: "Number of rows fetched by queries in this database"
    values: [tup_fetched]
    key_labels:
      - dbname
    query_ref: ccp_stat_database
  - metric_name: ccp_stat_database_tup_inserted
    type: gauge
    help: "Number of rows inserted by queries in this database"
    values: [tup_inserted]
    key_labels:
      - dbname
    query_ref: ccp_stat_database
  - metric_name: ccp_stat_database_tup_updated
    type: gauge
    help: "Number of rows updated by queries in this database"
    values: [tup_updated]
    key_labels:
      - dbname
    query_ref: ccp_stat_database
  - metric_name: ccp_stat_database_tup_deleted
    type: gauge
    help: "Number of rows deleted by queries in this database"
    values: [tup_deleted]
    key_labels:
      - dbname
    query_ref: ccp_stat_database
  - metric_name: ccp_stat_database_conflicts
    type: gauge
    help: "Number of queries canceled due to conflicts with recovery in this database"
    values: [conflicts]
    key_labels:
      - dbname
    query_ref: ccp_stat_database
  - metric_name: ccp_stat_database_temp_files
    type: gauge
    help: "Number of temporary files created by queries in this database. All temporary files are counted, regardless of why the temporary file was created (e.g., sorting or hashing), and regardless of the log_temp_files setting."
    values: [temp_files]
    key_labels:
      - dbname
    query_ref: ccp_stat_database
  - metric_name: ccp_stat_database_temp_bytes
    type: gauge
    help: "Total amount of data written to temporary files by queries in this database"
    values: [temp_bytes]
    key_labels:
      - dbname
    query_ref: ccp_stat_database
  - metric_name: ccp_stat_database_deadlocks
    type: gauge
    help: "Number of deadlocks detected in this database"
    values: [deadlocks]
    key_labels:
      - dbname
    query_ref: ccp_stat_database


  - metric_name: ccp_transaction_wraparound_oldest_current_xid
    type: gauge
    help: "Oldest current transaction ID in cluster"
    values: [oldest_current_xid]
    query_ref: ccp_transaction_wraparound
  - metric_name: ccp_transaction_wraparound_percent_towards_wraparound
    type: gauge
    help: "Percentage towards transaction ID exhaustion/wraparound"
    values: [percent_towards_wraparound]
    query_ref: ccp_transaction_wraparound
  - metric_name: ccp_transaction_wraparound_percent_towards_emergency_autovac
    type: gauge
    help: "Percentage towards transaction ID wraparound"
    values: [percent_towards_emergency_autovac]
    query_ref: ccp_transaction_wraparound


  - metric_name: ccp_wal_activity_last_5_min_size_bytes
    type: gauge
    help: "Current size in bytes of the last 5 minutes of WAL generation. Includes recycled WALs."
    values: [last_5_min_size_bytes]
    query_ref: ccp_wal_activity
  - metric_name: ccp_wal_activity_total_size_bytes
    type: gauge
    help: "Current size in bytes of the WAL directory"
    values: [total_size_bytes]
    query_ref: ccp_wal_activity

  - metric_name: ccp_autovacuum_workers_count
    type: gauge
    help: "Count of autovacuum workers currently running"
    values: [count]
    query_ref: ccp_autovacuum_workers

  - metric_name: ccp_autovacuum_workers_max
    type: gauge
    help: "Count of autovacuum workers currently running"
    values: [max]
    query_ref: ccp_autovacuum_workers

#  - metric_name:
#    type: gauge
#    help:
#    values: []
#    query_ref:

########## QUERIES ##########
queries:

  - query_name: ccp_archive_command_status
    query: |
      SELECT  seconds_since_last_fail
      , seconds_since_last_archive
      , archived_count
      , failed_count
      FROM pgmonitor_ext.ccp_archive_command_status


  - query_name: ccp_connection_stats
    query: |
      SELECT active
        , total
        , idle
        , idle_in_txn
        , max_idle_in_txn_time
        , max_query_time
        , max_blocked_query_time
        , max_connections
        FROM pgmonitor_ext.ccp_connection_stats


  - query_name: ccp_database_size
    query: |
      SELECT dbname
        , bytes
      FROM pgmonitor_ext.ccp_database_size


  - query_name: ccp_is_in_recovery
    query: |
      SELECT status
      FROM pgmonitor_ext.ccp_pg_is_in_recovery


  - query_name: ccp_locks
    query: |
      SELECT dbname
        , mode
        , count
      FROM pgmonitor_ext.ccp_locks


  - query_name: ccp_pg_hba_checksum
    query: |
      SELECT pgmonitor_ext.pg_hba_checksum() AS status


  - query_name: ccp_pg_settings_checksum
    query: |
      SELECT pgmonitor_ext.pg_settings_checksum() AS status


  - query_name: ccp_postgresql_version
    query: |
      SELECT current
      FROM pgmonitor_ext.ccp_postgresql_version


  - query_name: ccp_postmaster_runtime
    query: |
      SELECT start_time_seconds
      FROM pgmonitor_ext.ccp_postmaster_runtime


  - query_name: ccp_postmaster_uptime
    query: |
      SELECT seconds
      FROM pgmonitor_ext.ccp_postmaster_uptime


  - query_name: ccp_replication_lag
    query: |
      SELECT replay_time
      , received_time
      FROM pgmonitor_ext.ccp_replication_lag


  - query_name: ccp_replication_lag_size
    query: |
      SELECT replica
        , replica_hostname
        , replica_port
        , bytes
      FROM pgmonitor_ext.ccp_replication_lag_size


  - query_name: ccp_replication_slots
    query: |
      SELECT slot_name
        , active
        , retained_bytes
      FROM pgmonitor_ext.ccp_replication_slots


  - query_name: ccp_sequence_exhaustion
    query: |
      SELECT count FROM pgmonitor_ext.sequence_exhaustion(75)


  - query_name: ccp_settings_pending_restart
    query: |
      SELECT count
      FROM pgmonitor_ext.ccp_settings_pending_restart


  - query_name: ccp_stat_bgwriter
    query: |
      SELECT buffers_clean
        , maxwritten_clean
        , buffers_alloc
      FROM pgmonitor_ext.ccp_stat_bgwriter

  - query_name: ccp_stat_checkpointer
    query: |
      SELECT num_timed
        , num_requested
        , write_time
        , sync_time
        , buffers_written
      FROM pgmonitor_ext.ccp_stat_checkpointer

  - query_name: ccp_stat_io_bgwriter
    query: |
      SELECT writes
        , fsyncs
      FROM pgmonitor_ext.ccp_stat_io_bgwriter

  - query_name: ccp_stat_database
    query: |
      SELECT dbname
        , xact_commit
        , xact_rollback
        , blks_read
        , blks_hit
        , tup_returned
        , tup_fetched
        , tup_inserted
        , tup_updated
        , tup_deleted
        , conflicts
        , temp_files
        , temp_bytes
        , deadlocks
      FROM pgmonitor_ext.ccp_stat_database


  - query_name: ccp_transaction_wraparound
    query: |
      SELECT oldest_current_xid
        , percent_towards_wraparound
        , percent_towards_emergency_autovac
      FROM pgmonitor_ext.ccp_transaction_wraparound


  - query_name: ccp_wal_activity
    query: |
      SELECT last_5_min_size_bytes
        , total_size_bytes
      FROM pgmonitor_ext.ccp_wal_activity


  - query_name: ccp_autovacuum_workers
    query: |
      SELECT count(*) AS count, current_setting('autovacuum_max_workers') AS max
      FROM pg_catalog.pg_stat_activity
      WHERE backend_type = 'autovacuum worker';
